name: Continuous Integration Build for BP calculator ASP.Net Core app

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: "sb-csd-bp"
  AZURE_WEBAPP_PACKAGE_PATH: '.'
on:
  push:
    branches: [ "main","sian/tidy-up" ]
  workflow_dispatch:

jobs:
  ci:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:

    # Checkout the project
    - name: Checkout
      uses: actions/checkout@v4
    
    # Install and Configure Dotnet
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # build the project
    - name: Build for Release
      run: dotnet build --configuration Release /p:ContinuousIntegrationBuild=true

    # run standard unit tests
    - name: Run unit tests
      run: dotnet test BPCalculatorTest/BPCalculatorTest.csproj --no-restore --configuration Release --collect:"XPlat Code Coverage" --collect "Code coverage" -l:trx

    # publish unit test results to github
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
        artifact: ''
        name: MS Tests
        path: '**.trx'
        reporter: 'dotnet-trx'

    - name: code coverage
      run: |
        dotnet tool install --global dotnet-coverage

    # code coverage
    - name: Install Dotnet Code Coverage
      run: |
        dotnet tool install --global dotnet-coverage
  
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
      env:
       DOTNET_TOOL_ROOT: $HOME/.dotnet/tools

    - name: Generate HTML Code Test Coverage Report
      run: |
        reportgenerator -reports:./BPCalculatorTest/TestResults/**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/

    # run sonar cloud analyis (report in https://sonarcloud.io/project/information?id=gclynch_bankCI2022)
    # define SONAR_TOKEN secret to match project token
    - name: Analyze code with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.organization=salob
          -Dsonar.projectKey=salob_bp
          -Dsonar.sources=BPCalculator/
          -Dsonar.cs.opencover.reportsPaths=BPCalculatorTest/TestResults/**/coverage.opencover.xml
          -Dsonar.cs.vstest.reportsPaths=**.trx
          -Dsonar.verbose=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # upload built project for CD pipeline
    - name: dotnet publish
      run: cd BPCalculator && dotnet publish -c Release --property:PublishDir=../myapp

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: .net-app
        path: ./myapp
  
  cd:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: ci
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  
  post-validation:
    runs-on: ubuntu-latest
    steps:
      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4

      # Performance Tests    
      - name: Run K6 Performance Tests
        run: |
          docker pull grafana/k6
          pwd
          ls -la
          docker run -v $GITHUB_WORKSPACE/PerformanceTests:/opt/ -i grafana/k6 run /opt/k6-staging.js

      # - name: Depcheck
      #   uses: dependency-check/Dependency-Check_Action@main
      #   id: Depcheck
      #   with:
      #     project: 'BMI'
      #     path: '.'
      #     format: 'HTML'    
      #     args: >
      #       --failOnCVSS 8            
      #     # fail if CVSS score (CVE scoring system) is High >=8
          
      # - name: Upload Test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #      name: Depcheck report
      #      path: ${{github.workspace}}/reports