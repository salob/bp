name: CI/CD Pipeline

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: "sb-csd-bp"
  AZURE_RESOURCE_GROUP: "sb-csd-rg"
  AZURE_WEBAPP_PACKAGE_PATH: '.'

on:
  push:
    branches: [ "main" ]

jobs:
  smoketest:
    uses: ./.github/workflows/smoketest.yml
    
  build-and-test:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: debug logic
        run: echo "${{ github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.event == 'push' && github.event.workflow_run.conclusion == 'success' }}"
      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4
      
      # Install and Configure Dotnet
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # build the project
      - name: Build for Release
        run: dotnet build --configuration Release

      # run standard unit tests
      - name: Run unit tests
        run: dotnet test BPCalculatorTest/BPCalculatorTest.csproj --no-restore --configuration Release --collect:"XPlat Code Coverage" -l:trx -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      # publish unit test results to github
      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        with:
          artifact: ''
          name: MS Tests
          path: '**.trx'
          reporter: 'dotnet-trx'
          badge-title: 'unit-tests'

      # run acceptance tests
      - name: Run Acceptance Tests
        run: dotnet test BPCalculatorBDDTest/BPCalculatorBDDTest.csproj --no-restore --configuration Release -l:"trx;LogFileName=BDDTests.trx"

      # publish BDD test results to github
      - name: Publish Acceptance Test Results
        uses: dorny/test-reporter@v1
        with:
          artifact: ''
          name: MS Tests
          path: '**/BDDTests.trx'
          reporter: 'dotnet-trx'
          badge-title: 'acceptance-tests'

      # code coverage
      - name: Install Dotnet Code Coverage
        run: |
          dotnet tool install --global dotnet-coverage
    
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
        env:
          DOTNET_TOOL_ROOT: $HOME/.dotnet/tools

      - name: Generate HTML Code Test Coverage Report
        run: |
          reportgenerator -reports:./BPCalculatorTest/TestResults/**/coverage.opencover.xml -targetdir:coverage-report -reporttypes:Html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/

      - name: Hack for SonarQube code coverage
        run: |
          sed -i -e 's|/home/runner/work/bp/bp|\.|g' ./BPCalculatorTest/TestResults/**/coverage.opencover.xml
    
      - name: Analyze code with SonarCloud
        uses: sonarsource/sonarqube-scan-action@v4.1.0
        with:
          args: >
            -Dsonar.organization=salob
            -Dsonar.projectKey=salob_bp
            -Dsonar.exclusions=**/wwwroot/**,**/bin/**,**/obj/**,**/coverage-report/**,**/docs/**,**/PerformanceTest/**
            -Dsonar.verbose=true
            -Dsonar.cs.opencover.reportsPaths=./BPCalculatorTest/TestResults/**/coverage.opencover.xml
            -Dsonar.cs.vstest.reportsPaths=**.trx
            -Dsonar.sources=./
            -Dsonar.coverage.exclusions=**/PerformanceTest/**,**/BPCalculator/Startup.cs,**/BPCalculator/Pages/**,**/BPCalculator/Program.cs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # upload built project for CD pipeline
      - name: dotnet publish
        run: cd BPCalculator && dotnet publish -c Release --property:PublishDir=../myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./myapp

  infrastructure-as-code:
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - smoketest
      - build-and-test
    steps:

      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4

      # IaC - Azure login using service principal and secret
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      
      # IaC - Provision Web App
      - name: Deploy Bicep file
        run: |
          az deployment group create \
            --resource-group sb-csd-rg \
            --template-file Infrastructure/template.bicep
    
  deploy-to-staging:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: infrastructure-as-code
    environment:
      name: 'Staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    outputs:
      webapp-url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          slot-name: staging
  
  performance-tests:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: deploy-to-staging
    env:
      WEB_APP_URI: ${{ needs.deploy-to-staging.outputs.webapp-url }}
    steps:

      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4
      
      # Performance Tests    
      - name: Run K6 Performance Tests
        run: |
          docker pull grafana/k6
          pwd
          ls -la
          docker run -v $GITHUB_WORKSPACE/PerformanceTest:/opt/ -i grafana/k6 run /opt/k6-staging.js

  e2e-tests:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: deploy-to-staging
    env:
      WEB_APP_URI: ${{ needs.deploy-to-staging.outputs.webapp-url }}
    steps:
      
      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4
      
      # build the project (required for selenium)
      - name: Build for Release
        run: dotnet build --configuration Release
            
      # Run Selenium tests
      - name: Run Selenium tests
        run: dotnet test BPCalculatorE2ETest/BPCalculatorE2ETest.csproj --no-restore --configuration Release -l:"trx;LogFileName=selenium.trx"
    
      # publish Selenium test results to github
      - name: Publish E2E Test Results
        uses: dorny/test-reporter@v1
        with:
          artifact: ''
          name: MS Tests
          path: '**/selenium.trx'
          reporter: 'dotnet-trx'
          badge-title: 'e2e-tests'
      
      # Upload Selenium screenshots
      - name: Upload E2E ScreenShots
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots
          path: ./BPCalculatorE2ETest/TestResults/*.png

  penetration-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    env:
      WEB_APP_URI: ${{ needs.deploy-to-staging.outputs.webapp-url }}
    steps:

      # Pull down zap docker image 
      - name: Pull Docker image for ZAP
        run: docker pull zaproxy/zap-weekly

      # Scan staging using zap
      - name: Run baseline scan
        run: docker run -v /report:/zap/wrk/:rw --user root -t zaproxy/zap-weekly zap-baseline.py -t ${{env.WEB_APP_URI}} -I -r zapreport.html

      # Upload zap pen test report
      - name: upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: ZAPreport
          path: /report/zapreport.html

  blue-green-deployment:
    runs-on: ubuntu-latest
    needs: 
      - performance-tests
      - e2e-tests
      - penetration-tests

    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-production.outputs.webapp-url }}    
    steps:

    # Azure login
    - name: Azure Login action
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # blue/green
    - name: swap staging and production slots
      id: deploy-to-production
      run: |
        echo "Swapping slots from $SOURCE_SLOT to $TARGET_SLOT"
        az webapp deployment slot swap \
          --name $AZURE_WEBAPP_NAME \
          --resource-group $AZURE_RESOURCE_GROUP \
          --slot $SOURCE_SLOT \
          --target-slot $TARGET_SLOT
 
          echo "Retrieving production URL..."
          PRODUCTION_URL=$(az webapp show \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --query "defaultHostName" \
            -o tsv)

          echo "Production URL: $PRODUCTION_URL"

          # Set output for this step
          echo "::set-output name=webapp-url::https://$PRODUCTION_URL"
      env:
        SOURCE_SLOT: "staging"
        TARGET_SLOT: "production"
